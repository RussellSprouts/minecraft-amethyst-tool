
const fs = require('fs');
const path = require('path');
const {promisify} = require('util');

const [,, outputFileName, ...pngFiles] = process.argv;

console.log('OUTPUT FILE', outputFileName);
console.log('PNG FILES', pngFiles);

(async () => {
    let outputFile = '// Generated by generate.js\n';
    for (const png of pngFiles) {
        const contents = await promisify(fs.readFile)(png);
        const url = `data:image/png;base64,${contents.toString('base64')}`
        const varName = path.basename(png, '.png');
        // wrap the textures in a function, or else Closure will
        // inline them everywhere. Once tscc supports newer versions
        // of the compiler, we can instead enable aliasing for large strings.
        outputFile += `export const ${varName} = () => "${url}";\n`;
    }

    await promisify(fs.writeFile)(outputFileName, outputFile, 'utf8');
})().catch(console.error);