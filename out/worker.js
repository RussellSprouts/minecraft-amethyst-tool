'use strict';const ld=location.pathname.match(/\((.*)\)/)?.[1].replace(/\$/g,"/");ld&&importScripts(...ld.split(/,/g).map(a=>`../${a}`));const md=new Map;console.log("I am the worker!");md.set(hb.event,hb);md.set(ib.event,ib);md.set(jb.event,jb);let nd="";const pd=new Map;
async function qd(a){if("init-worker"===a.data.event)nd=a.data.value.name,console.log(`I'm the worker ${nd}.`);else if("register-worker"===a.data.event){var b=a.ports[0];b.onmessage=qd;pd.set(a.data.value.name,b);console.log(`The worker ${nd} now knows about ${a.data.value.name}`);b.postMessage({event:"hello",value:{from:nd,name:a.data.value.name}})}else if("hello"===a.data.event)console.log("Received a hello!",nd,a.data.value);else{b=md.get(a.data.event);if(!b)throw Error(`Unhandled event ${a.data.event}`);
var c=[];postMessage({event:a.data.event,id:a.data.id,value:await b.V({progress(d){postMessage({event:"progress",X:a.data.event,id:a.data.id,value:d})},Z(d){c.push(...d)}},...a.data.U)},c)}}onmessage=qd;
//# sourceMappingURL=worker.js.map
